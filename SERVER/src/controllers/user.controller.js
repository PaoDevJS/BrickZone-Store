import userModel from "../models/user.model.js";
import bcrypt from "bcrypt";
import sendNodemailer from "../utils/nodemailer.js";

export const GetItemUser = async (req, res) => {
  try {
    const user = await userModel.findById(
      { _id: req.id },
      { createdAt: 0, updatedAt: 0, __v: 0 }
    );

    return res.status(200).json({ user });
  } catch (error) {
    console.log(error.message);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t." });
  }
};

export const GetAllUsers = async (req, res) => {
  try {
    const users = await userModel.find(
      {},
      { createdAt: 0, updatedAt: 0, __v: 0 }
    );

    return res.status(200).json({ users });
  } catch (error) {
    console.log(error.message);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t." });
  }
};

export const isChangePassword = async (req, res) => {
  try {
    const { password, newPassword, confirmPassword } = req.body;
    const user = await userModel.findById(req.id);

    if (!password || !newPassword || !confirmPassword)
      return res
        .status(400)
        .json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin." });
    if (!user)
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });

    const comparePassword = await bcrypt.compareSync(password, user.password);

    if (!comparePassword)
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng." });

    if (newPassword !== confirmPassword)
      return res.status(400).json({ message: "X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp." });

    if (newPassword.length < 8)
      return res
        .status(400)
        .json({ message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±." });

    const hashPassword = await bcrypt.hashSync(newPassword, 10);

    user.password = hashPassword || user.password;
    await user.save();

    return res.status(200).json({ message: "Thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng." });
  } catch (error) {
    console.log(error.message);
    return res
      .status(500)
      .json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t." });
  }
};

export const isCheckEmailOfUser = async (req, res) => {
  try {
    const { email } = req.body;
    if (!email)
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email." });

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!emailRegex.test(email))
      return res.status(400).json({ message: "Email kh√¥ng h·ª£p l·ªá." });

    const user = await userModel.findOne({ email });
    if (!user)
      return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });

    const OTP = Math.floor(1000000 * Math.random() * 900000).toString();

    const subject = `M√£ X√°c Th·ª±c OTP C·ªßa B·∫°n`;
    const html = `
      <p>
        Xin ch√†o ${user.firstName + user.lastName}, <br>
            
        B·∫°n v·ª´a y√™u c·∫ßu m√£ x√°c th·ª±c (OTP) ƒë·ªÉ ƒëƒÉng nh·∫≠p ho·∫∑c x√°c minh t√†i kho·∫£n t·∫°i BRICKZONE STORE. <br>
    
        üîê M√£ OTP c·ªßa b·∫°n: ${OTP} <br>
    
        ‚ö† L∆∞u √Ω: <br>
    
        M√£ n√†y c√≥ hi·ªáu l·ª±c trong 3 ph√∫t. <br>
        Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai, k·ªÉ c·∫£ nh√¢n vi√™n CH·ªêT STORE. <br>
        N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, h√£y b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ngay. <br>
        üìû H·ªó tr·ª£: hahuybinh2305@gmail.com | 0969028560 <br>
    
        C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng s·∫£n ph·∫©m t·∫°i BRICKZONE STORE! üöÄ <br>
    
        Tr√¢n tr·ªçng.
      </p>
    `;

    // G·ª≠i m√£ OTP qua email
    sendNodemailer({ gmail: user.email, subject, html });
    const hashOtp = await bcrypt.hashSync(OTP, 10);
    user.otp = hashOtp;
    user.otpExpireAt = Date.now + 3 * 60 * 1000;
    await user.save();

    return res.status(200).json({ page: 2 });
  } catch (error) {
    console.log(error.message);
    return res.status(500).json({
      message: "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.",
    });
  }
};

export const isCheckOtpOfUser = async (req, res) => {
  try {
    const { otp, email } = req.body;

    if (!otp)
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p m√£ x√°c th·ª±c." });

    const user = await userModel.findOne({ email });
    if (!user) {
      return res
        .status(404)
        .json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√°." });
    }

    if (Date.now() > user.otpExpireAt)
      return res.status(400).json({
        message: "M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu l·∫°i m√£ m·ªõi.",
      });

    const compareOtp = await bcrypt.compareSync(otp, user.otp);
    if (!compareOtp)
      return res.status(400).json({
        message: "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.",
      });

    user.otp = null;
    user.otpExpireAt = null;
    await user.save();

    return res
      .status(200)
      .json({ page: 3, message: "X√°c th·ª±c m√£ OTP th√†nh c√¥ng." });
  } catch (error) {
    console.log(error.message);
    return res
      .status(500)
      .json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t." });
  }
};

export const isRestPassword = async (req, res) => {
  try {
    const { email, newPassword, confirmPassword } = req.body;

    const user = await userModel.findOne({ email });

    if (!newPassword || !confirmPassword)
      return res
        .status(404)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u m·ªõi." });

    if (newPassword !== confirmPassword) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp." });
    }

    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });
    }

    if (newPassword.length < 8) {
      return res
        .status(400)
        .json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±." });
    }

    const hashPassword = await bcrypt.hashSync(newPassword, 10);
    user.password = hashPassword;
    await user.save();

    return res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.log(error.message);
    return res
      .status(500)
      .json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t." });
  }
};
